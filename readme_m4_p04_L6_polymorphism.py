
# !file_kv.py
# В программировании для некоторых задач распространены key-value базы
# данных. Внешне они работают по принципу ассоциативных массивов,
# но живут как отдельные программы и умеют делать много полезных
# штук: например, сохранять данные на диск, переносить данные между
# машинами в сети и тому подобное.

# В этой задаче реализована подобная база данных в виде класса FileKV,
# который сохраняет свои данные на диске в указанном файле. Она имеет
# следующий интерфейс:

# ?Примеры
# \\from file_kv import FileKV

# \\map = FileKV('/path/to/dbfile')
# # Получение значения по ключу
# \\map.get_('key')  # 'value'
# \\map.get_('unknownkey')  # None
# # Получение значения и дефолт
# \\map.get_('unknownkey', 'default value')  # 'default value'
# # Установка и обновление ключа
# \\map.set_('key2', 'value2')
# \\map.get_('key2')  # 'value2'
# # Удаление ключа
# \\map.unset_('key2')
# \\map.get_('key2')  # None
# \map.set_('key', 'value')
# # Возврат всех данных из базы (возвращается новый словарь)
# \\map.to_dict()  # {'key': 'value'}

# В целях тестирования бывает полезно иметь реализацию такой базы данных,
# которая хранит данные в памяти, а не во внешнем хранилище.
# Это позволяет легко сбрасывать состояние между тестами и не замедлять их.

# ?in_memory_kv.py
# Реализуйте класс InMemoryKV, который представляет
# собой in -memory key-value хранилище. Данные внутри него хранятся
# в обычном словаре. Интерфейс этого класса совпадает с FileKV
# за исключением __init__.py. Инициализатор InMemoryKV принимает
# на вход словарь, который становится начальным значением базы данных.

# ?Примеры
# \\from in_memory_kv import InMemoryKV

# \\map = InMemoryKV({'key': 10})
# \\map.get_('key')  # 10

# ?src/solution.py
# Реализуйте и функцию swap_key_value(), которая принимает на вход объект
# базы данных и меняет в нём ключи и значения местами.

# ?swap_key_value()
# — полиморфная функция, она может работать
# с любой реализацией key-value, имеющей такой же интерфейс.
# \\from solution import swap_key_value
# \\from in_memory_kv import InMemoryKV


# \\map = InMemoryKV({'key': 10})
# \\map.set_('key2', 'value2')
# \\swap_key_value(map)
# \\map.get_('key')  # None
# \\map.get_(10)  # 'key'
# \\map.get_('value2')  # 'key2'

# ?Подсказки
# Изучите тесты
# Методы __init__() и to_dict() не должны зависеть от изменения словаря.
# Для этого вам нужно будет использовать глубокое копирование
